update_beta3 = exp(beta3) * update_beta3 / batch - lamb_beta[3]*beta3
update_beta = c(update_beta1,update_beta2,update_beta3)
w_hat = w_hat + lr_w*update_w
t_hat = t_hat + lr_t*update_t
beta_hat = beta_hat + lr_beta*update_beta
w_hat_list = rbind(w_hat_list,w_hat)
t_hat_list = rbind(t_hat_list,t_hat)
beta_hat_list = rbind(beta_hat_list,beta_hat)
}
}
return(list(w_hat_list,t_hat_list,beta_hat_list))
}
lr_w = 0.02 ; lr_t = 0.02 ; lr_beta = c(0.01,0.01,0.01) #learnging rate gamma
lamb_w = 0. ; lamb_t = 0. ; lamb_beta = c(0.,0.,0.)  # regularize coefficient
alpha = 0. #alpha = 0 means no decay
epoches = 1
batch = 500 #batch = 1 means ASGD & SGD
SGD_1 <-  SGD_ASGD_gamma_decay(data = data,
lr_w = lr_w ,lr_t = lr_t,lr_beta = lr_beta,
lamb_w = lamb_w,lamb_t = lamb_t,lamb_beta = lamb_beta,
alpha = alpha,
epoches = epoches,
batch = batch
)
print(batch)
SGD_ASGD_gamma_decay <- function(data,lr_w,lr_t,lr_beta,
lamb_w,lamb_t,lamb_beta,alpha,epoches,batch)
{
N = nrow(data)
dim = ncol(data)-1
r = 5 #rating
first_lr_w = lr_w
first_lr_t = lr_t
first_lr_beta = lr_beta
w_hat = matrix(rnorm(dim,sd=0.1),nrow=1)
t_hat = rnorm(1)
beta_hat = rnorm(3)
w_hat_list = c()
t_hat_list = c()
beta_hat_list = c()
n = 1 #iteration
for(i in 1:epoches){
sample = sample(1:N,N)
data = data[sample,]
for(j in seq(1,N,batch)){
x = as.matrix(data[j:(j+batch-1),-(dim+1)])
rating = data[j:(j+batch-1),(dim+1)]
pred = x %*% t(w_hat)
threshold = cumsum(c(t_hat,exp(beta_hat)))
cdf = t(1/(1+exp(t(matrix(rep(pred,r-1),ncol=(r-1)))-threshold)))
cdf = cbind(0,cdf,1)
pdf = t(apply(cdf,MARGIN = 1,diff))
#gamma_Decay
lr_w = first_lr_w*(n^-alpha)
lr_t = first_lr_t*(n^-alpha)
lr_beta = first_lr_beta*(n^-alpha)
n = n+1
#iteration
bigger_r = 1 - cdf[c(j:(j+batch-1)),(rating+1)] # P(ri > r)
smaller_r = cdf[j:(j+batch-1),rating] # P(ri < r)
diff_r = bigger_r - smaller_r # P(ri = r)
print(batch)
update_w = ((as.matrix(diff_r)) %*% -x)/batch - lamb_w*w_hat
update_t = (mean(diff_r)) - lamb_t*t_hat
beta1 = beta_hat[1] ; beta2 = beta_hat[2] ; beta3 = beta_hat[3]
update_beta1 = sum(-cdf[rating==5,5]) + sum(diff_r[rating==4]) +
sum(diff_r[rating ==3]) + sum(cdf[rating==2,3]*(1-cdf[rating==2,3])/diff_r[rating==2])
update_beta1 = exp(beta1) * update_beta1 / batch - lamb_beta[1]*beta1
update_beta2 = sum(-cdf[rating==5,5]) + sum(diff_r[rating==4]) +
sum(cdf[rating==3,4]*(1-cdf[rating==3,4])/diff_r[rating==3])
update_beta2 = exp(beta2) * update_beta2 / batch - lamb_beta[2]*beta2
update_beta3 = sum(-cdf[rating==5,5]) +
sum(cdf[rating==4,5]*(1-cdf[rating==4,5])/diff_r[rating==4])
update_beta3 = exp(beta3) * update_beta3 / batch - lamb_beta[3]*beta3
update_beta = c(update_beta1,update_beta2,update_beta3)
w_hat = w_hat + lr_w*update_w
t_hat = t_hat + lr_t*update_t
beta_hat = beta_hat + lr_beta*update_beta
w_hat_list = rbind(w_hat_list,w_hat)
t_hat_list = rbind(t_hat_list,t_hat)
beta_hat_list = rbind(beta_hat_list,beta_hat)
}
}
return(list(w_hat_list,t_hat_list,beta_hat_list))
}
lr_w = 0.02 ; lr_t = 0.02 ; lr_beta = c(0.01,0.01,0.01) #learnging rate gamma
lamb_w = 0. ; lamb_t = 0. ; lamb_beta = c(0.,0.,0.)  # regularize coefficient
alpha = 0. #alpha = 0 means no decay
epoches = 1
batch = 500 #batch = 1 means ASGD & SGD
SGD_1 <-  SGD_ASGD_gamma_decay(data = data,
lr_w = lr_w ,lr_t = lr_t,lr_beta = lr_beta,
lamb_w = lamb_w,lamb_t = lamb_t,lamb_beta = lamb_beta,
alpha = alpha,
epoches = epoches,
batch = batch
)
print(cdf)
SGD_ASGD_gamma_decay <- function(data,lr_w,lr_t,lr_beta,
lamb_w,lamb_t,lamb_beta,alpha,epoches,batch)
{
N = nrow(data)
dim = ncol(data)-1
r = 5 #rating
first_lr_w = lr_w
first_lr_t = lr_t
first_lr_beta = lr_beta
w_hat = matrix(rnorm(dim,sd=0.1),nrow=1)
t_hat = rnorm(1)
beta_hat = rnorm(3)
w_hat_list = c()
t_hat_list = c()
beta_hat_list = c()
n = 1 #iteration
for(i in 1:epoches){
sample = sample(1:N,N)
data = data[sample,]
for(j in seq(1,N,batch)){
x = as.matrix(data[j:(j+batch-1),-(dim+1)])
rating = data[j:(j+batch-1),(dim+1)]
pred = x %*% t(w_hat)
threshold = cumsum(c(t_hat,exp(beta_hat)))
cdf = t(1/(1+exp(t(matrix(rep(pred,r-1),ncol=(r-1)))-threshold)))
cdf = cbind(0,cdf,1)
pdf = t(apply(cdf,MARGIN = 1,diff))
#gamma_Decay
lr_w = first_lr_w*(n^-alpha)
lr_t = first_lr_t*(n^-alpha)
lr_beta = first_lr_beta*(n^-alpha)
n = n+1
#iteration
bigger_r = 1 - cdf[c(j:(j+batch-1)),(rating+1)] # P(ri > r)
smaller_r = cdf[j:(j+batch-1),rating] # P(ri < r)
diff_r = bigger_r - smaller_r # P(ri = r)
print(cdf)
update_w = ((as.matrix(diff_r)) %*% -x)/batch - lamb_w*w_hat
update_t = (mean(diff_r)) - lamb_t*t_hat
beta1 = beta_hat[1] ; beta2 = beta_hat[2] ; beta3 = beta_hat[3]
update_beta1 = sum(-cdf[rating==5,5]) + sum(diff_r[rating==4]) +
sum(diff_r[rating ==3]) + sum(cdf[rating==2,3]*(1-cdf[rating==2,3])/diff_r[rating==2])
update_beta1 = exp(beta1) * update_beta1 / batch - lamb_beta[1]*beta1
update_beta2 = sum(-cdf[rating==5,5]) + sum(diff_r[rating==4]) +
sum(cdf[rating==3,4]*(1-cdf[rating==3,4])/diff_r[rating==3])
update_beta2 = exp(beta2) * update_beta2 / batch - lamb_beta[2]*beta2
update_beta3 = sum(-cdf[rating==5,5]) +
sum(cdf[rating==4,5]*(1-cdf[rating==4,5])/diff_r[rating==4])
update_beta3 = exp(beta3) * update_beta3 / batch - lamb_beta[3]*beta3
update_beta = c(update_beta1,update_beta2,update_beta3)
w_hat = w_hat + lr_w*update_w
t_hat = t_hat + lr_t*update_t
beta_hat = beta_hat + lr_beta*update_beta
w_hat_list = rbind(w_hat_list,w_hat)
t_hat_list = rbind(t_hat_list,t_hat)
beta_hat_list = rbind(beta_hat_list,beta_hat)
}
}
return(list(w_hat_list,t_hat_list,beta_hat_list))
}
lr_w = 0.02 ; lr_t = 0.02 ; lr_beta = c(0.01,0.01,0.01) #learnging rate gamma
lamb_w = 0. ; lamb_t = 0. ; lamb_beta = c(0.,0.,0.)  # regularize coefficient
alpha = 0. #alpha = 0 means no decay
epoches = 1
batch = 500 #batch = 1 means ASGD & SGD
SGD_1 <-  SGD_ASGD_gamma_decay(data = data,
lr_w = lr_w ,lr_t = lr_t,lr_beta = lr_beta,
lamb_w = lamb_w,lamb_t = lamb_t,lamb_beta = lamb_beta,
alpha = alpha,
epoches = epoches,
batch = batch
)
SGD_ASGD_gamma_decay <- function(data,lr_w,lr_t,lr_beta,
lamb_w,lamb_t,lamb_beta,alpha,epoches,batch)
{
N = nrow(data)
dim = ncol(data)-1
r = 5 #rating
first_lr_w = lr_w
first_lr_t = lr_t
first_lr_beta = lr_beta
w_hat = matrix(rnorm(dim,sd=0.1),nrow=1)
t_hat = rnorm(1)
beta_hat = rnorm(3)
w_hat_list = c()
t_hat_list = c()
beta_hat_list = c()
n = 1 #iteration
for(i in 1:epoches){
sample = sample(1:N,N)
data = data[sample,]
for(j in seq(1,N,batch)){
x = as.matrix(data[j:(j+batch-1),-(dim+1)])
rating = data[j:(j+batch-1),(dim+1)]
pred = x %*% t(w_hat)
threshold = cumsum(c(t_hat,exp(beta_hat)))
cdf = t(1/(1+exp(t(matrix(rep(pred,r-1),ncol=(r-1)))-threshold)))
cdf = cbind(0,cdf,1)
pdf = t(apply(cdf,MARGIN = 1,diff))
#gamma_Decay
lr_w = first_lr_w*(n^-alpha)
lr_t = first_lr_t*(n^-alpha)
lr_beta = first_lr_beta*(n^-alpha)
n = n+1
#iteration
bigger_r = 1 - cdf[c(j:(j+batch-1)),(rating+1)] # P(ri > r)
smaller_r = cdf[j:(j+batch-1),rating] # P(ri < r)
diff_r = bigger_r - smaller_r # P(ri = r)
print(cdf[,rating+1])
update_w = ((as.matrix(diff_r)) %*% -x)/batch - lamb_w*w_hat
update_t = (mean(diff_r)) - lamb_t*t_hat
beta1 = beta_hat[1] ; beta2 = beta_hat[2] ; beta3 = beta_hat[3]
update_beta1 = sum(-cdf[rating==5,5]) + sum(diff_r[rating==4]) +
sum(diff_r[rating ==3]) + sum(cdf[rating==2,3]*(1-cdf[rating==2,3])/diff_r[rating==2])
update_beta1 = exp(beta1) * update_beta1 / batch - lamb_beta[1]*beta1
update_beta2 = sum(-cdf[rating==5,5]) + sum(diff_r[rating==4]) +
sum(cdf[rating==3,4]*(1-cdf[rating==3,4])/diff_r[rating==3])
update_beta2 = exp(beta2) * update_beta2 / batch - lamb_beta[2]*beta2
update_beta3 = sum(-cdf[rating==5,5]) +
sum(cdf[rating==4,5]*(1-cdf[rating==4,5])/diff_r[rating==4])
update_beta3 = exp(beta3) * update_beta3 / batch - lamb_beta[3]*beta3
update_beta = c(update_beta1,update_beta2,update_beta3)
w_hat = w_hat + lr_w*update_w
t_hat = t_hat + lr_t*update_t
beta_hat = beta_hat + lr_beta*update_beta
w_hat_list = rbind(w_hat_list,w_hat)
t_hat_list = rbind(t_hat_list,t_hat)
beta_hat_list = rbind(beta_hat_list,beta_hat)
}
}
return(list(w_hat_list,t_hat_list,beta_hat_list))
}
lr_w = 0.02 ; lr_t = 0.02 ; lr_beta = c(0.01,0.01,0.01) #learnging rate gamma
lamb_w = 0. ; lamb_t = 0. ; lamb_beta = c(0.,0.,0.)  # regularize coefficient
alpha = 0. #alpha = 0 means no decay
epoches = 1
batch = 500 #batch = 1 means ASGD & SGD
SGD_1 <-  SGD_ASGD_gamma_decay(data = data,
lr_w = lr_w ,lr_t = lr_t,lr_beta = lr_beta,
lamb_w = lamb_w,lamb_t = lamb_t,lamb_beta = lamb_beta,
alpha = alpha,
epoches = epoches,
batch = batch
)
SGD_ASGD_gamma_decay <- function(data,lr_w,lr_t,lr_beta,
lamb_w,lamb_t,lamb_beta,alpha,epoches,batch)
{
N = nrow(data)
dim = ncol(data)-1
r = 5 #rating
first_lr_w = lr_w
first_lr_t = lr_t
first_lr_beta = lr_beta
w_hat = matrix(rnorm(dim,sd=0.1),nrow=1)
t_hat = rnorm(1)
beta_hat = rnorm(3)
w_hat_list = c()
t_hat_list = c()
beta_hat_list = c()
n = 1 #iteration
for(i in 1:epoches){
sample = sample(1:N,N)
data = data[sample,]
for(j in seq(1,N,batch)){
x = as.matrix(data[j:(j+batch-1),-(dim+1)])
rating = data[j:(j+batch-1),(dim+1)]
pred = x %*% t(w_hat)
threshold = cumsum(c(t_hat,exp(beta_hat)))
cdf = t(1/(1+exp(t(matrix(rep(pred,r-1),ncol=(r-1)))-threshold)))
cdf = cbind(0,cdf,1)
pdf = t(apply(cdf,MARGIN = 1,diff))
#gamma_Decay
lr_w = first_lr_w*(n^-alpha)
lr_t = first_lr_t*(n^-alpha)
lr_beta = first_lr_beta*(n^-alpha)
n = n+1
#iteration
bigger_r = 1 - cdf[c(j:(j+batch-1)),(rating+1)] # P(ri > r)
smaller_r = cdf[j:(j+batch-1),rating] # P(ri < r)
diff_r = bigger_r - smaller_r # P(ri = r)
print(cdf[c(j:(j+batch-1)),])
update_w = ((as.matrix(diff_r)) %*% -x)/batch - lamb_w*w_hat
update_t = (mean(diff_r)) - lamb_t*t_hat
beta1 = beta_hat[1] ; beta2 = beta_hat[2] ; beta3 = beta_hat[3]
update_beta1 = sum(-cdf[rating==5,5]) + sum(diff_r[rating==4]) +
sum(diff_r[rating ==3]) + sum(cdf[rating==2,3]*(1-cdf[rating==2,3])/diff_r[rating==2])
update_beta1 = exp(beta1) * update_beta1 / batch - lamb_beta[1]*beta1
update_beta2 = sum(-cdf[rating==5,5]) + sum(diff_r[rating==4]) +
sum(cdf[rating==3,4]*(1-cdf[rating==3,4])/diff_r[rating==3])
update_beta2 = exp(beta2) * update_beta2 / batch - lamb_beta[2]*beta2
update_beta3 = sum(-cdf[rating==5,5]) +
sum(cdf[rating==4,5]*(1-cdf[rating==4,5])/diff_r[rating==4])
update_beta3 = exp(beta3) * update_beta3 / batch - lamb_beta[3]*beta3
update_beta = c(update_beta1,update_beta2,update_beta3)
w_hat = w_hat + lr_w*update_w
t_hat = t_hat + lr_t*update_t
beta_hat = beta_hat + lr_beta*update_beta
w_hat_list = rbind(w_hat_list,w_hat)
t_hat_list = rbind(t_hat_list,t_hat)
beta_hat_list = rbind(beta_hat_list,beta_hat)
}
}
return(list(w_hat_list,t_hat_list,beta_hat_list))
}
lr_w = 0.02 ; lr_t = 0.02 ; lr_beta = c(0.01,0.01,0.01) #learnging rate gamma
lamb_w = 0. ; lamb_t = 0. ; lamb_beta = c(0.,0.,0.)  # regularize coefficient
alpha = 0. #alpha = 0 means no decay
epoches = 1
batch = 500 #batch = 1 means ASGD & SGD
SGD_1 <-  SGD_ASGD_gamma_decay(data = data,
lr_w = lr_w ,lr_t = lr_t,lr_beta = lr_beta,
lamb_w = lamb_w,lamb_t = lamb_t,lamb_beta = lamb_beta,
alpha = alpha,
epoches = epoches,
batch = batch
)
SGD_ASGD_gamma_decay <- function(data,lr_w,lr_t,lr_beta,
lamb_w,lamb_t,lamb_beta,alpha,epoches,batch)
{
N = nrow(data)
dim = ncol(data)-1
r = 5 #rating
first_lr_w = lr_w
first_lr_t = lr_t
first_lr_beta = lr_beta
w_hat = matrix(rnorm(dim,sd=0.1),nrow=1)
t_hat = rnorm(1)
beta_hat = rnorm(3)
w_hat_list = c()
t_hat_list = c()
beta_hat_list = c()
n = 1 #iteration
for(i in 1:epoches){
sample = sample(1:N,N)
data = data[sample,]
for(j in seq(1,N,batch)){
x = as.matrix(data[j:(j+batch-1),-(dim+1)])
rating = data[j:(j+batch-1),(dim+1)]
pred = x %*% t(w_hat)
threshold = cumsum(c(t_hat,exp(beta_hat)))
cdf = t(1/(1+exp(t(matrix(rep(pred,r-1),ncol=(r-1)))-threshold)))
cdf = cbind(0,cdf,1)
pdf = t(apply(cdf,MARGIN = 1,diff))
#gamma_Decay
lr_w = first_lr_w*(n^-alpha)
lr_t = first_lr_t*(n^-alpha)
lr_beta = first_lr_beta*(n^-alpha)
n = n+1
#iteration
bigger_r = 1 - cdf[c(j:(j+batch-1)),(rating+1)] # P(ri > r)
smaller_r = cdf[j:(j+batch-1),rating] # P(ri < r)
diff_r = bigger_r - smaller_r # P(ri = r)
print(cdf[c(j:(j+batch-1)),rating])
update_w = ((as.matrix(diff_r)) %*% -x)/batch - lamb_w*w_hat
update_t = (mean(diff_r)) - lamb_t*t_hat
beta1 = beta_hat[1] ; beta2 = beta_hat[2] ; beta3 = beta_hat[3]
update_beta1 = sum(-cdf[rating==5,5]) + sum(diff_r[rating==4]) +
sum(diff_r[rating ==3]) + sum(cdf[rating==2,3]*(1-cdf[rating==2,3])/diff_r[rating==2])
update_beta1 = exp(beta1) * update_beta1 / batch - lamb_beta[1]*beta1
update_beta2 = sum(-cdf[rating==5,5]) + sum(diff_r[rating==4]) +
sum(cdf[rating==3,4]*(1-cdf[rating==3,4])/diff_r[rating==3])
update_beta2 = exp(beta2) * update_beta2 / batch - lamb_beta[2]*beta2
update_beta3 = sum(-cdf[rating==5,5]) +
sum(cdf[rating==4,5]*(1-cdf[rating==4,5])/diff_r[rating==4])
update_beta3 = exp(beta3) * update_beta3 / batch - lamb_beta[3]*beta3
update_beta = c(update_beta1,update_beta2,update_beta3)
w_hat = w_hat + lr_w*update_w
t_hat = t_hat + lr_t*update_t
beta_hat = beta_hat + lr_beta*update_beta
w_hat_list = rbind(w_hat_list,w_hat)
t_hat_list = rbind(t_hat_list,t_hat)
beta_hat_list = rbind(beta_hat_list,beta_hat)
}
}
return(list(w_hat_list,t_hat_list,beta_hat_list))
}
lr_w = 0.02 ; lr_t = 0.02 ; lr_beta = c(0.01,0.01,0.01) #learnging rate gamma
lamb_w = 0. ; lamb_t = 0. ; lamb_beta = c(0.,0.,0.)  # regularize coefficient
alpha = 0. #alpha = 0 means no decay
epoches = 1
batch = 500 #batch = 1 means ASGD & SGD
SGD_1 <-  SGD_ASGD_gamma_decay(data = data,
lr_w = lr_w ,lr_t = lr_t,lr_beta = lr_beta,
lamb_w = lamb_w,lamb_t = lamb_t,lamb_beta = lamb_beta,
alpha = alpha,
epoches = epoches,
batch = batch
)
tail(SGD_1[[3]],200)
data[,c(2,4)]
data[1,c(2,4)]
data[1,c(2:4)]
data[1,c(2,34)]
data[1,"rating"]
cdf[1,"rating"]
cdf[1,rating]
cdf[,rating]
SGD_ASGD_gamma_decay <- function(data,lr_w,lr_t,lr_beta,
lamb_w,lamb_t,lamb_beta,alpha,epoches,batch)
{
N = nrow(data)
dim = ncol(data)-1
r = 5 #rating
first_lr_w = lr_w
first_lr_t = lr_t
first_lr_beta = lr_beta
w_hat = matrix(rnorm(dim,sd=0.1),nrow=1)
t_hat = rnorm(1)
beta_hat = rnorm(3)
w_hat_list = c()
t_hat_list = c()
beta_hat_list = c()
n = 1 #iteration
for(i in 1:epoches){
sample = sample(1:N,N)
data = data[sample,]
for(j in seq(1,N,batch)){
x = as.matrix(data[j:(j+batch-1),-(dim+1)])
rating = data[j:(j+batch-1),(dim+1)]
pred = x %*% t(w_hat)
threshold = cumsum(c(t_hat,exp(beta_hat)))
cdf = t(1/(1+exp(t(matrix(rep(pred,r-1),ncol=(r-1)))-threshold)))
cdf = cbind(0,cdf,1)
pdf = t(apply(cdf,MARGIN = 1,diff))
#gamma_Decay
lr_w = first_lr_w*(n^-alpha)
lr_t = first_lr_t*(n^-alpha)
lr_beta = first_lr_beta*(n^-alpha)
n = n+1
#iteration
bigger_r = 1 - as.matrix(cdf)[c(j:(j+batch-1)),(rating+1)] # P(ri > r)
smaller_r = cdf[j:(j+batch-1),rating] # P(ri < r)
diff_r = bigger_r - smaller_r # P(ri = r)
print(as.matrix(cdf)[c(j:(j+batch-1)),rating])
update_w = ((as.matrix(diff_r)) %*% -x)/batch - lamb_w*w_hat
update_t = (mean(diff_r)) - lamb_t*t_hat
beta1 = beta_hat[1] ; beta2 = beta_hat[2] ; beta3 = beta_hat[3]
update_beta1 = sum(-cdf[rating==5,5]) + sum(diff_r[rating==4]) +
sum(diff_r[rating ==3]) + sum(cdf[rating==2,3]*(1-cdf[rating==2,3])/diff_r[rating==2])
update_beta1 = exp(beta1) * update_beta1 / batch - lamb_beta[1]*beta1
update_beta2 = sum(-cdf[rating==5,5]) + sum(diff_r[rating==4]) +
sum(cdf[rating==3,4]*(1-cdf[rating==3,4])/diff_r[rating==3])
update_beta2 = exp(beta2) * update_beta2 / batch - lamb_beta[2]*beta2
update_beta3 = sum(-cdf[rating==5,5]) +
sum(cdf[rating==4,5]*(1-cdf[rating==4,5])/diff_r[rating==4])
update_beta3 = exp(beta3) * update_beta3 / batch - lamb_beta[3]*beta3
update_beta = c(update_beta1,update_beta2,update_beta3)
w_hat = w_hat + lr_w*update_w
t_hat = t_hat + lr_t*update_t
beta_hat = beta_hat + lr_beta*update_beta
w_hat_list = rbind(w_hat_list,w_hat)
t_hat_list = rbind(t_hat_list,t_hat)
beta_hat_list = rbind(beta_hat_list,beta_hat)
}
}
return(list(w_hat_list,t_hat_list,beta_hat_list))
}
lr_w = 0.02 ; lr_t = 0.02 ; lr_beta = c(0.01,0.01,0.01) #learnging rate gamma
lamb_w = 0. ; lamb_t = 0. ; lamb_beta = c(0.,0.,0.)  # regularize coefficient
alpha = 0. #alpha = 0 means no decay
epoches = 1
batch = 500 #batch = 1 means ASGD & SGD
SGD_1 <-  SGD_ASGD_gamma_decay(data = data,
lr_w = lr_w ,lr_t = lr_t,lr_beta = lr_beta,
lamb_w = lamb_w,lamb_t = lamb_t,lamb_beta = lamb_beta,
alpha = alpha,
epoches = epoches,
batch = batch
)
set.seed(2020)
#SGD and ASGD with gamma decay
lr = 0.001
beta <- rnorm(5)
ASGD <- c()
SGD <- c()
n = 1000
alpha = 0.6
m=100
for(i in 1:m){
beta_hat = beta_hat_sum <- rnorm(5)
new_lr = lr
j=1
for(j in 1:n){
new_lr <- lr*(j^(-alpha))
X <- rnorm(5,5,1)
Y <- X %*% beta + rnorm(1)
gradient <- X * c(Y - X %*% beta_hat)
beta_hat <- beta_hat + new_lr*gradient
beta_hat_sum <- beta_hat+beta_hat_sum
j= j+1
}
ASGD <- cbind(ASGD,beta_hat_sum/(n+1))
SGD <- cbind(SGD,beta_hat)
if(i %% 10 ==0){
print(i)
}
}
ASGD_simu <- (ASGD - beta)*sqrt(n)
ASGD_simu_cov  <- cov(t(ASGD_simu))
ASGD_simu_cov
SGD_simu <- (SGD - beta)*sqrt(n)
SGD_simu_cov  <- cov(t(SGD_simu))
SGD_simu_cov
B <- rep(5,5) %*% t(rep(5,5)) + diag(1,5)
B_inv <- solve(B)
B_inv
sum(sqrt((ASGD_simu_cov - B_inv)^2/length(B_inv)))
abs(sum((ASGD_simu_cov - B_inv)/B_inv))/length(B_inv)
sum(sqrt((SGD_simu_cov - B_inv)^2/length(B_inv)))
abs(sum((SGD_simu_cov - B_inv)/B_inv))/length(B_inv)
mean(sqrt((ASGD_simu_cov - B_inv)^2))
ASGD_simu_cov
ASGD
mean(sqrt((ASGD - beta)^2))
